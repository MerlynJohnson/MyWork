SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/******************************************************************************
		NAME:      [USP_PROC_PLN_TO_ITM]
		PURPOSE:   To create a reporting table that merges plan to with forecasting and actuals data.
		
		******************************************************************************/
CREATE PROCEDURE [dbo].[USP_PROC_PLN_TO_ITM] 
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
SET IMPLICIT_TRANSACTIONS OFF;
--Timestamps are included for debugging and to test the execution times of each procedure
--PRINT N'00: #Start: ' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
--in order to poperly filter records out and apply the current week we first set variables to reflect what is in UVW_FISC_CAL
DECLARE @curr_week INT
DECLARE @curr_year INT
SET @curr_year =  YEAR(getdate()) 
SET @curr_week = YEAR(getdate())*100 + (SELECT FISC_WK FROM KG_VIEWS.KG.UVW_FISC_CAL
					WHERE CAST(GETDATE() as Date) BETWEEN [FISC_WK_STRT_DT] and [FISC_WK_END_DT] or CAST(GETDATE() as Date) = [FISC_WK_STRT_DT])

DECLARE @CLS_PD VARCHAR(10), @CLS_YR VARCHAR(10),  @CLS_WK VARCHAR(10);
SELECT   @CLS_PD =  FISC_PD-1 ,  @CLS_YR =  FISC_YR FROM KG_VIEWS.KG.UVW_FISC_CAL
					WHERE CAST(GETDATE() as Date) BETWEEN [FISC_WK_STRT_DT] and [FISC_WK_END_DT] or CAST(GETDATE() as Date) = [FISC_WK_STRT_DT]
IF(@CLS_PD < 1) 
BEGIN
	 SET @CLS_PD = 12 
	 SET  @CLS_YR = @CLS_YR - 1
END

SELECT @CLS_WK = FISC_YR*100 + MAX(FISC_WK) FROM KG_VIEWS.KG.UVW_FISC_CAL WHERE FISC_YR = @CLS_YR AND FISC_PD = @CLS_PD GROUP BY FISC_YR



DECLARE @full_load varchar(1)
SET @full_load = (SELECT LAST_UPDT FROM KNA_COMRCL.dbo.RGM_DELTA_KEY WHERE TABLE_NM = 'FULL_LOAD')
--get full load vs delta load flag

--FULL LOAD, run the full build if there was a BW Full load, else run a delta load for performance tuning.
------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
if (@full_load = 'Y')
begin


---PRINT N'01: #Start Loading the multiprovider master: ' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
--Get a distinct list of all records to be used.  This includes getting the list of all unique records that make up the 6 indicator fields from
--the Plan To Item Actual table (Actuals) as well as the TPM60 table (Forecasting)
IF OBJECT_ID ('tempDB..#zm_pln_to_itm_pln_fct_mstr') IS NOT NULL
begin
	DROP TABLE #zm_pln_to_itm_pln_fct_mstr;
end
SELECT DISTINCT [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material] 
      ,[Calendar Week]
      ,[Mixed Pallet Flag]
	  ,[CURRENCY]
	  ,[SALE_FLAG]
INTO #zm_pln_to_itm_pln_fct_mstr
FROM ( SELECT [CUST] as [CUSTOMER]
      ,[MATRL] as[MATERIAL]
      ,[MIXD_PLT_MATRL] as [Mixed Pallet Material]
      ,[CAL_WK] as[Calendar Week]
      ,[MIXD_PLT_FLG] as [Mixed Pallet Flag]
	  ,[CURR] as CURRENCY
	  ,SALE_FLG as SALE_FLAG
	  FROM  [KNA_COMRCL].[dbo].[PLN_TO_ITM_ACT]
	  WHERE [CUST] <>'' and [MATRL] <>'' and [MIXD_PLT_MATRL] <>''
			and [CAL_WK] IS NOT NULL and [MIXD_PLT_FLG] <>'' and [CURR]<>'' 
UNION ALL

	SELECT [CUST] as [CUSTOMER] 
      ,[MATRL] as [MATERIAL] 
      ,[MIXD_PLT_MATRL] as [Mixed Pallet Material] 
      ,[CAL_WK] as [Calendar Week]
      ,[MIXD_PLT_FLG] as [Mixed Pallet Flag] 
	  ,[CURR] as CURRENCY 
	  ,SALE_FLG as SALE_FLAG
	  FROM [KNA_COMRCL].[dbo].[ZM_TPM60_CKF]
	  WHERE [CUST] <>'' and [MATRL] <>'' and [MIXD_PLT_MATRL] <>'' 
			and [CAL_WK] IS NOT NULL and [MIXD_PLT_FLG] <>'' and [CURR] <>'' ) tmp 


--PRINT N'02: ' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
create unique clustered index ix_pln_to_itm_final on #zm_pln_to_itm_pln_fct_mstr ([CUSTOMER] ,[MATERIAL],[Mixed Pallet Material],[Calendar Week],[Mixed Pallet Flag] ,CURRENCY, SALE_FLAG)

--get all the forecasting values for future weeks from the TPM60 calculated table.  Use the current week variable.  This table will be applied to the final join
--conditions in the Fact table
IF OBJECT_ID ('tempDB..#zm_pln_to_itm_pln_gtwk') IS NOT NULL
begin
	DROP TABLE #zm_pln_to_itm_pln_gtwk;
end
SELECT [CUST] as [CUSTOMER] 
      ,[MATRL] as [MATERIAL] 
      ,[MIXD_PLT_MATRL] as [Mixed Pallet Material] 
      ,[CAL_WK] as [Calendar Week] 
      ,[MIXD_PLT_FLG] as [Mixed Pallet Flag] 
      ,[CURR] as[CURRENCY] 
      ,[PLN_SHIP_USD] as [Plan Ship $]
      ,[PLN_SHIP_LBS] as [Plan Ship LBS]
      ,[PLN_SHIP_EA] as [Plan Ship EA]
      ,[PLN_TOTL_OFF_INVC_USD] as [Plan Total Off Invoice Dollars]
      ,[TOTL_PLN_COST_OF_PROD_USD] as [Total Planned COP $]
      ,[TOTL_PLN_SHIPMNT_CS] as [Total Planned Shipment CS]
      ,[TOTL_PLN_SHIPMNT_KGS] as [Total Planned Shipment Kilos]
      ,[SALE_FLG] as SALE_FLAG
	  INTO #zm_pln_to_itm_pln_gtwk
	  FROM KNA_COMRCL.dbo.ZM_TPM60_CKF
	  WHERE @CLS_WK < [CAL_WK] --CHANGED TO CLOSED PERIOD WEEK

--PRINT N'03: ' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
create clustered index ix_pln_to_itm_final on #zm_pln_to_itm_pln_gtwk ([CUSTOMER] ,[MATERIAL],[Mixed Pallet Material],[Calendar Week],[Mixed Pallet Flag] ,CURRENCY)

--Use the multiprovider to create calculated fields that will be used in the final table.
--Use Plan To Item Actual to get all previous values as well as the table that was created previously
IF OBJECT_ID ('tempDB..#zm_pln_to_itm_pln_fct_1') IS NOT NULL
begin
	DROP TABLE #zm_pln_to_itm_pln_fct_1;
end
SELECT  mstr.[CUSTOMER]
      ,mstr.[MATERIAL]
      ,mstr.[Mixed Pallet Material]
      ,mstr.[Mixed Pallet Flag]
	  ,mstr.[Calendar Week]
      ,mstr.[CURRENCY]
      ,ISNULL([PLN_BASE_LBS],0) as [Plan Base LBS]
      ,ISNULL([PLN_INCR_LBS],0) as [Plan Incr LBS]
      ,ISNULL([PLN_BASE_UNITS],0) as [Plan Base Units]
      ,ISNULL([PLN_INCR_UNITS],0) as [Plan Incr Units]
      ,ISNULL([PLN_BASE_RTL_USD],0) as [Plan Base Ret $'s]
      ,ISNULL([PLN_INCR_RTL_USD] ,0) as [Plan Incr Ret $'s]
      ,ISNULL([PLN_BASE_USD] ,0) as [Plan Base $]
      ,ISNULL([PLN_INCR_SHIP_USD],0) as [Plan Incr Ship $]
      ,ISNULL(tpm.[PLN_SHIP_USD],0) as [Plan Ship $]
      ,ISNULL(tpm.[TOTL_PLN_SHIPMNT_CS],0) as [Plan Ship CS]
      ,ISNULL(tpm.[PLN_SHIP_LBS],0) as [Plan Ship LBS]
      ,ISNULL(tpm.[TOTL_PLN_SHIPMNT_KGS],0) as [Plan Ship KG]
      ,ISNULL(tpm.[PLN_SHIP_EA],0) as [Plan Ship EA]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_USD],0) else 0 end as [Actual Ship $]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_CS],0) else 0 end as [Actual Ship CS]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_LBS],0) else 0 end  as [Actual Ship LBS]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_EA],0)  else 0 end as [Actual Ship Units]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_KGS],0) else 0 end  as [Actual Ship KG]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[DM_ACTL_COST_OF_PROD_USD],0) else 0 end as[Actual COP $]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_USD],0) else 0 end as [< Curr Week: LE Ship $ - Actual Dollars ($)] 
      ,ISNULL(gtw.[Plan Ship $],0) as [>= Curr Week: LE Ship $ - Plan Ship $]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_LBS],0) else 0 end as [< Curr Week: LE Ship LBS - Actual Pounds (LB)]
      ,ISNULL(gtw.[Plan Ship LBS],0) as [>= Curr Week: LE Ship LBS - Plan Ship LBS]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_EA],0) else 0 end as [< Curr Week: LE Ship Units - Actual Eaches (EA)]
      ,ISNULL(gtw.[Plan Ship EA],0) as [>= Curr Week: LE Ship Units - Plan Ship EA]
      ,ISNULL(tpm.[TOTL_PLN_COST_OF_PROD_USD] ,0) as [Total Planned COP $]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[DM_ACTL_COST_OF_PROD_USD],0) else 0 end as  [< Curr Week: LE COP $ - Actual COP $]
      ,ISNULL(gtw.[Total Planned COP $],0) as [>= Curr Week: LE COP $ - Total Planned COP $]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_CS],0) else 0 end as [< Curr Week: LE Cases - Actual Cases (CS)]
      ,ISNULL(gtw.[Total Planned Shipment CS],0) as [>= Curr Week: LE Cases - Total Planned Shipment CS]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_KGS],0) else 0 end as [< Curr Week: LE Kilos - Actual Kilograms (KG)]
      ,ISNULL(gtw.[Total Planned Shipment Kilos],0) as [>= Curr Week: LE Kilos - Total Planned Shipment Kilos]
      ,ISNULL([PLN_BASE_CS],0) as [Plan Base Cases]
      ,ISNULL([PLN_INCR_CS],0) as [Plan Incr Cases]
      ,ISNULL([PLN_INCR_SHIP_CS],0) as [Plan Incr Ship Cases]
      ,ISNULL([PLN_INCR_SHIP_UNITS],0) as [Plan Incr Ship Units]
      ,ISNULL([PLN_INCR_SHIP_LBS],0) as [Plan Incr Ship LBS]
      ,ISNULL([PLN_INCR_SHIP_KG],0) as [Plan Incr Ship Kilos]
      ,ISNULL([SUGSTD_BASE_VOL_SAS],0) as [Suggested Base Volume (SAS)]
      ,ISNULL([SUGSTD_SHLF_PRC_SAS],0) as [Suggested Shelf Price (SAS)]
      ,ISNULL([LATST_ESTMT_MISS_OI],0) as [Lastest Estimate Missed OI]
      ,ISNULL([LATST_ESTMT_BILLBACK_USD],0) as [Latest Estimate Bill Back Dollars]
      ,ISNULL([LATST_ESTMT_EDLP_BILLBACK_USD],0) as [Latest Estimate EDLP Bill Back Dollars]
      ,ISNULL([LATST_ESTMT_SCANAPPS_BILLBACK_USD],0) as [Latest Estimate Scan Apps Bill Back Dollars]
      ,ISNULL([LATST_ESTMT_SCAN_USD],0) as [Latest Estimate Scan Dollars]
      ,ISNULL([LE_WW_USD],0) as [LE WW$]
      ,ISNULL([LATST_ESTMT_TOTL_FIX_KMF],0) as [Latest Estimate Total Fixed KMF]
      ,case when @curr_week <=tpm.[CAL_WK] then  ISNULL(gtw.[Plan Total Off Invoice Dollars],0) else 0 end as [Plan Total Off Invoice Dollars]
      ,ISNULL(pln.[SPCL_PROMTN_ALLWNC]*(-1),0) as [Actual OI Spend (Not restricted)]
      ,ISNULL([PLN_TOTL_FIX_KMF_SPND],0) as [Plan Total Fixed KMF Spend]
      ,ISNULL([PLN_VAR_KMF_SPND],0) as [Plan Variable KMF Spend]
	  ,ISNULL([SCAN_APPS_OL_RT_AMT],0) + ISNULL([OL_AMT],0) as [Overlay Amount]  ----TASK0564827 - ADD Scanner apps and overlay amount columns
	INTO #zm_pln_to_itm_pln_fct_1
	FROM  #zm_pln_to_itm_pln_fct_mstr mstr 
	LEFT OUTER JOIN [KNA_COMRCL].[dbo].[ZM_TPM60_CKF] tpm ON (tpm.[CUST]  = mstr.CUSTOMER and tpm.[MATRL] = mstr.MATERIAL and tpm.[MIXD_PLT_MATRL] = mstr.[Mixed Pallet Material] 
												and tpm.[CAL_WK]  = mstr.[Calendar Week] and tpm.[MIXD_PLT_FLG]  = mstr.[Mixed Pallet Flag] and  tpm.[CURR] = mstr.CURRENCY and 
												tpm.[SALE_FLG]  = mstr.SALE_FLAG )
	LEFT OUTER JOIN #zm_pln_to_itm_pln_gtwk gtw ON (gtw.CUSTOMER = mstr.CUSTOMER and gtw.MATERIAL = mstr.MATERIAL and gtw.[Mixed Pallet Material] = mstr.[Mixed Pallet Material] 
												and gtw.[Calendar Week] = mstr.[Calendar Week] and gtw.[Mixed Pallet Flag] = mstr.[Mixed Pallet Flag] and  gtw.CURRENCY = mstr.CURRENCY and 
												gtw.[SALE_FLAG]= mstr.SALE_FLAG )
	LEFT OUTER JOIN [KNA_COMRCL].[dbo].[PLN_TO_ITM_ACT] pln ON (mstr.CUSTOMER = pln.[CUST] and mstr.MATERIAL = pln.[MATRL] and mstr.[Mixed Pallet Material] = pln.[MIXD_PLT_MATRL] 
												and mstr.[Calendar Week] = pln.[CAL_WK] and mstr.[Mixed Pallet Flag] = pln.[MIXD_PLT_FLG] and  mstr.CURRENCY = pln.[CURR] and mstr.SALE_FLAG = pln.SALE_FLG
												and  pln.[CAL_WK] < @curr_week-- CHANGED TO CLOSED PERIOD WEEK
												)
	
--PRINT N'05: ' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))

		BEGIN TRANSACTION;
		SAVE TRANSACTION  start_tran;
--aggregate some fields that will be used in the final table as well as move the final table into the correct format.  Also be sure to filter out any records
--That sum to 0. 
IF EXISTS (SELECT name from sys.indexes where name = 'IX_PLN_TO_ITM')
begin
	drop index [IX_PLN_TO_ITM] on KNA_COMRCL.[dbo].[PLN_TO_ITM]
end 
TRUNCATE TABLE [KNA_COMRCL].[dbo].[PLN_TO_ITM]
INSERT INTO [KNA_COMRCL].[dbo].[PLN_TO_ITM]
SELECT [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material]
      ,[Mixed Pallet Flag]
      ,[Calendar Week]
      ,[CURRENCY]
      ,sum([Plan Base LBS])
      ,sum([Plan Incr LBS])
      ,sum([Plan Base Units])
      ,sum([Plan Incr Units])
      ,sum([Plan Base Ret $'s])
      ,sum([Plan Incr Ret $'s])
      ,sum([Plan Base $])
      ,sum([Plan Incr Ship $])
      ,sum([Plan Ship CS])
      ,sum([Plan Ship $])
      ,sum([Plan Ship LBS])
      ,sum([Plan Ship KG])
      ,sum([Plan Ship EA])
      ,sum([Actual Ship $])
      ,sum([Actual Ship CS])
      ,sum([Actual Ship LBS])
      ,sum([Actual Ship Units])
      ,sum([Actual Ship KG])
	  ,sum([LE Ship $])
	  ,sum([LE Ship LBS])
	  ,sum([LE Ship Units])
	  ,sum([Total Planned KMF $])
	  ,sum([LE KMF $])
	  ,sum([Total Planned COP $])
	  ,sum([Actual COP $])
	  ,sum([LE COP $])
	  ,sum([LE Cases])
	  ,sum([LE Kilos])
      ,sum([Plan Base Cases])
      ,sum([Plan Incr Cases])
      ,sum([Plan Incr Ship Cases])
      ,sum([Plan Incr Ship Units])
      ,sum([Plan Incr Ship LBS])
      ,sum([Plan Incr Ship Kilos])
      ,sum([Suggested Base Volume (SAS)])
      ,sum([Suggested Shelf Price (SAS)])
FROM (SELECT [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material]
      ,[Mixed Pallet Flag]
      ,[Calendar Week]
      ,[CURRENCY]
      ,[Plan Base LBS]
      ,[Plan Incr LBS]
      ,[Plan Base Units]
      ,[Plan Incr Units]
      ,[Plan Base Ret $'s]
      ,[Plan Incr Ret $'s]
      ,[Plan Base $]
      ,[Plan Incr Ship $]
      ,[Plan Ship CS]
      ,[Plan Ship $]
      ,[Plan Ship LBS]
      ,[Plan Ship KG]
      ,[Plan Ship EA]
      ,[Actual Ship $]
      ,[Actual Ship CS]
      ,[Actual Ship LBS]
      ,[Actual Ship Units]
      ,[Actual Ship KG]
      ,[< Curr Week: LE Ship $ - Actual Dollars ($)]+[>= Curr Week: LE Ship $ - Plan Ship $] as [LE Ship $]
      ,[< Curr Week: LE Ship LBS - Actual Pounds (LB)]+[>= Curr Week: LE Ship LBS - Plan Ship LBS] as [LE Ship LBS]
      ,[< Curr Week: LE Ship Units - Actual Eaches (EA)]+[>= Curr Week: LE Ship Units - Plan Ship EA] as [LE Ship Units]
      ,[Plan Total Fixed KMF Spend]+[Plan Variable KMF Spend] as [Total Planned KMF $]
      ,[LE KMF $] = CASE
						WHEN @curr_week > [Calendar Week] and @curr_year >= floor([Calendar Week]/100)
						THEN [Latest Estimate Total Fixed KMF] + [Actual OI Spend (Not restricted)] - [Plan Total Off Invoice Dollars] + [Lastest Estimate Missed OI] + 
															[Latest Estimate Bill Back Dollars] + [Latest Estimate EDLP Bill Back Dollars] + [Latest Estimate Scan Apps Bill Back Dollars] + [Latest Estimate Scan Dollars] + [LE WW$] +[Overlay Amount]
						ELSE [Latest Estimate Total Fixed KMF] + [Actual OI Spend (Not restricted)] + [Plan Total Off Invoice Dollars] + [Lastest Estimate Missed OI] + 
							[Latest Estimate Bill Back Dollars] + [Latest Estimate EDLP Bill Back Dollars] + [Latest Estimate Scan Apps Bill Back Dollars] + [Latest Estimate Scan Dollars] + [LE WW$] +[Overlay Amount]---TASK0564827 - ADD Scanner apps and overlay amount columns
					END
      ,[Total Planned COP $]
      ,[Actual COP $]
      ,[< Curr Week: LE COP $ - Actual COP $]+[>= Curr Week: LE COP $ - Total Planned COP $] as [LE COP $]
      ,[< Curr Week: LE Cases - Actual Cases (CS)]+[>= Curr Week: LE Cases - Total Planned Shipment CS] as [LE Cases]
      ,[< Curr Week: LE Kilos - Actual Kilograms (KG)]+[>= Curr Week: LE Kilos - Total Planned Shipment Kilos] as [LE Kilos]
      ,[Plan Base Cases]
      ,[Plan Incr Cases]
      ,[Plan Incr Ship Cases]
      ,[Plan Incr Ship Units]
      ,[Plan Incr Ship LBS]
      ,[Plan Incr Ship Kilos]
      ,[Suggested Base Volume (SAS)]
      ,[Suggested Shelf Price (SAS)]
	  FROM #zm_pln_to_itm_pln_fct_1 )tmp
	  WHERE tmp.[Plan Base LBS]<> 0.000 or tmp.[Plan Incr LBS]<> 0.000 or tmp.[Plan Base Units]<> 0.000 or tmp.[Plan Incr Units]<> 0.000 or tmp.[Plan Base Ret $'s]<> 0.000 or tmp.[Plan Incr Ret $'s]<> 0.000 or tmp.[Plan Base $]<> 0.000 or tmp.[Plan Incr Ship $] <> 0.000 or tmp.[Plan Ship CS] <> 0.000 or tmp.[Plan Ship $]<> 0.000 or tmp.[Plan Ship LBS]<> 0.000 or tmp.[Plan Ship KG]
      <> 0.000 or tmp.[Plan Ship EA]<> 0.000 or tmp.[Actual Ship $]<> 0.000 or tmp.[Actual Ship CS]<> 0.000 or tmp.[Actual Ship LBS]<> 0.000 or tmp.[Actual Ship Units]<> 0.000 or tmp.[Actual Ship KG]<> 0.000 or tmp.[LE Ship $]<> 0.000 or tmp.[LE Ship LBS]<> 0.000 or tmp.[LE Ship Units]<> 0.000 or (tmp.[Total Planned KMF $]
      + tmp.[LE KMF $])<> 0.000 or tmp.[Total Planned COP $]<> 0.000 or tmp.[Actual COP $]<> 0.000 or tmp.[LE COP $]<> 0.000 or tmp.[LE Cases]<> 0.000 or tmp.[LE Kilos]<> 0.000 or tmp.[Plan Base Cases]<> 0.000 or tmp.[Plan Incr Cases]<> 0.000 or tmp.[Plan Incr Ship Cases]<> 0.000 or tmp.[Plan Incr Ship Units]
      <> 0.000 or tmp.[Plan Incr Ship LBS]<> 0.000 or tmp.[Plan Incr Ship Kilos]<> 0.000 or tmp.[Suggested Base Volume (SAS)]<> 0.000 or tmp.[Suggested Shelf Price (SAS)] <> 0.000 
	  GROUP BY [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material]
      ,[Mixed Pallet Flag]
      ,[Calendar Week]
      ,[CURRENCY]
	--PRINT N'06 Finish loading agg table: ' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))

	insert into [dbo].[PLN_TO_ITM]  select * from [dbo].[PLN_TO_ITM_HIST]  where  CAL_WK <= (year(getdate())-1)*100 


	IF (@@ERROR <> 0)
	begin
        ROLLBACK TRANSACTION start_tran;
		RETURN @@ERROR
	end
	COMMIT TRANSACTION;

	
	IF NOT EXISTS (SELECT name from sys.indexes where name = 'IX_PLN_TO_ITM')
	begin
		CREATE UNIQUE CLUSTERED INDEX [IX_PLN_TO_ITM] ON [dbo].[PLN_TO_ITM] ([CUST],[MATRL],[MIXD_PLT_MATRL],[MIXD_PLT_FLG],[CAL_WK],[CURR])
	end
	--PRINT N'07 full load finished: ' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
	end
	------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------
	--DELTA LOAD:  Use if the BW cubes were all deltas
	------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------
	else
	begin

--PRINT N'01: Start DELTA' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
	IF OBJECT_ID ('tempDB..#zm_pln_to_itm_delta_mstr') IS NOT NULL
	begin
		DROP TABLE #zm_pln_to_itm_delta_mstr;
	end
SELECT DISTINCT [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material] 
      ,[Calendar Week]
      ,[Mixed Pallet Flag]
	  ,[CURRENCY]
	  ,[SALE_FLAG]
INTO #zm_pln_to_itm_delta_mstr
FROM ( SELECT dbo.[CUST] as [CUSTOMER]
      ,dbo.[MATRL] as[MATERIAL]
      ,dbo.[MIXD_PLT_MATRL] as [Mixed Pallet Material]
      ,dbo.[CAL_WK] as[Calendar Week]
      ,dbo.[MIXD_PLT_FLG] as [Mixed Pallet Flag]
	  ,dbo.[CURR] as CURRENCY
	  ,dbo.SALE_FLG as SALE_FLAG
	  FROM  [KNA_COMRCL].[dbo].[PLN_TO_ITM_ACT] dbo
	  INNER JOIN [KNA_COMRCL].[STG].[ZM_TPM60] stg ON (dbo.CUST = stg.CUST and dbo.MATRL = stg.MATRL and dbo.MIXD_PLT_MATRL = stg.MIXD_PLT_MATRL
															and dbo.MIXD_PLT_FLG = stg.MIXD_PLT_FLG and stg.CURR = dbo.CURR and stg.CAL_WK = dbo.CAL_WK)
	  WHERE dbo.[CUST] <>'' and dbo.[MATRL] <>'' and dbo.[MIXD_PLT_MATRL] <>''
			and dbo.[CAL_WK] IS NOT NULL and dbo.[MIXD_PLT_FLG] <>'' and dbo.[CURR]<>''
UNION ALL

	SELECT dbo.[CUST] as [CUSTOMER] 
      ,dbo.[MATRL] as [MATERIAL] 
      ,dbo.[MIXD_PLT_MATRL] as [Mixed Pallet Material] 
      ,dbo.[CAL_WK] as [Calendar Week]
      ,dbo.[MIXD_PLT_FLG] as [Mixed Pallet Flag] 
	  ,dbo.[CURR] as CURRENCY 
	  ,dbo.SALE_FLG as SALE_FLAG
	  FROM [KNA_COMRCL].[dbo].[ZM_TPM60_CKF] dbo
	  INNER JOIN [KNA_COMRCL].[STG].[PLN_TO_ITM_ACT] stg ON (dbo.CUST = stg.CUST and dbo.MATRL = stg.MATRL and dbo.MIXD_PLT_MATRL = stg.MIXD_PLT_MATRL
															and dbo.MIXD_PLT_FLG = stg.MIXD_PLT_FLG and stg.CURR = dbo.CURR and stg.CAL_WK = dbo.CAL_WK)
	  WHERE dbo.[CUST] <>'' and dbo.[MATRL] <>'' and dbo.[MIXD_PLT_MATRL] <>'' 
			and dbo.[CAL_WK] IS NOT NULL and dbo.[MIXD_PLT_FLG] <>'' and dbo.[CURR] <>'' 
UNION ALL

SELECT dbo.[CUST] as [CUSTOMER]
      ,dbo.[MATRL] as[MATERIAL]
      ,dbo.[MIXD_PLT_MATRL] as [Mixed Pallet Material]
      ,dbo.[CAL_WK] as[Calendar Week]
      ,dbo.[MIXD_PLT_FLG] as [Mixed Pallet Flag]
	  ,dbo.[CURR] as CURRENCY
	  ,dbo.SALE_FLG as SALE_FLAG
	  FROM  [KNA_COMRCL].[dbo].[PLN_TO_ITM_ACT] dbo
	  INNER JOIN [KNA_COMRCL].[STG].[PLN_TO_ITM_ACT] stg ON (dbo.CUST = stg.CUST and dbo.MATRL = stg.MATRL and dbo.MIXD_PLT_MATRL = stg.MIXD_PLT_MATRL
															and dbo.MIXD_PLT_FLG = stg.MIXD_PLT_FLG and stg.CURR = dbo.CURR and stg.CAL_WK = dbo.CAL_WK)
	  WHERE dbo.[CUST] <>'' and dbo.[MATRL] <>'' and dbo.[MIXD_PLT_MATRL] <>''
			and dbo.[CAL_WK] IS NOT NULL and dbo.[MIXD_PLT_FLG] <>'' and dbo.[CURR]<>''
UNION ALL

	SELECT [CUST] as [CUSTOMER] 
      ,[MATRL] as [MATERIAL] 
      ,[MIXD_PLT_MATRL] as [Mixed Pallet Material] 
      ,[CAL_WK] as [Calendar Week]
      ,[MIXD_PLT_FLG] as [Mixed Pallet Flag] 
	  ,[CURR] as CURRENCY 
	  ,SALE_FLG as SALE_FLAG
	  FROM [KNA_COMRCL].[STG].[ZM_TPM60_CKF]
	  WHERE [CUST] <>'' and [MATRL] <>'' and [MIXD_PLT_MATRL] <>'' 
			and [CAL_WK] IS NOT NULL and [MIXD_PLT_FLG] <>'' and [CURR] <>'' ) tmp 

--On Monday we need to change the previous weeks data to be actuals and not the forecasting
IF (DATEPART(dw, GETDATE()) = 2)
begin
	IF OBJECT_ID ('tempDB..#zm_pln_to_itm_delta_mstr_Monday') IS NOT NULL
	begin
		DROP TABLE #zm_pln_to_itm_delta_mstr_Monday;
	end
	SELECT DISTINCT [CUST]
      ,[MATRL] 
      ,[MIXD_PLT_MATRL] 
      ,[CAL_WK] 
      ,[MIXD_PLT_FLG] 
	  ,[CURR] 
	  ,SALE_FLG 
	  INTO #zm_pln_to_itm_delta_mstr_Monday
	  FROM (SELECT dbo.[CUST]
      ,dbo.[MATRL] 
      ,dbo.[MIXD_PLT_MATRL] 
      ,dbo.[CAL_WK] 
      ,dbo.[MIXD_PLT_FLG] 
	  ,dbo.[CURR] 
	  ,dbo.SALE_FLG 
	  FROM  [KNA_COMRCL].[dbo].[PLN_TO_ITM_ACT] dbo
	  WHERE CAL_WK = @curr_week - 1

	UNION ALL 

	SELECT dbo.[CUST]  
      ,dbo.[MATRL] 
      ,dbo.[MIXD_PLT_MATRL] 
      ,dbo.[CAL_WK] 
      ,dbo.[MIXD_PLT_FLG] 
	  ,dbo.[CURR] 
	  ,dbo.SALE_FLG 
	  FROM [KNA_COMRCL].[dbo].[ZM_TPM60_CKF] dbo
	  WHERE CAL_WK = @curr_week - 1 ) tmp

	  --Delete any records that would cause the unique index to fail
	  DELETE FROM #zm_pln_to_itm_delta_mstr_Monday 
	  WHERE EXISTS ( SELECT [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material] 
      ,[Calendar Week]
      ,[Mixed Pallet Flag]
	  ,[CURRENCY]
	  ,[SALE_FLAG] 
	  FROM #zm_pln_to_itm_delta_mstr mstr 
	  WHERE [CUSTOMER] = [CUST] and [MATERIAL] = [MATRL] and [Mixed Pallet Material] = [MIXD_PLT_MATRL] and [CAL_WK] = [Calendar Week]
	  and [Mixed Pallet Flag] = [MIXD_PLT_FLG] and [CURR] =[CURRENCY] and mstr.SALE_FLAG = #zm_pln_to_itm_delta_mstr_Monday.SALE_FLG )


	  --ensure that you delete the previous weeks records
	  DELETE FROM [KNA_COMRCL].[dbo].[PLN_TO_ITM]
	  WHERE EXISTS ( SELECT [CUST] ,[MATRL],[MIXD_PLT_MATRL],[CAL_WK],[MIXD_PLT_FLG] ,CURR FROM #zm_pln_to_itm_delta_mstr_Monday stg
				WHERE stg.[CUST] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].CUST and stg.[MATRL]=[KNA_COMRCL].[dbo].[PLN_TO_ITM].[MATRL] and stg.[MIXD_PLT_MATRL] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[MIXD_PLT_MATRL] 
				and stg.[CAL_WK] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[CAL_WK] and stg.[MIXD_PLT_FLG]=[KNA_COMRCL].[dbo].[PLN_TO_ITM].[MIXD_PLT_FLG]
				 and stg.CURR = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[CURR])

	  --insert the changed records
	  INSERT INTO #zm_pln_to_itm_delta_mstr
	  SELECT * 
	  FROM #zm_pln_to_itm_delta_mstr_Monday
end
--PRINT N'02: Create Master Delta index' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
create unique clustered index ix_pln_to_itm_final on #zm_pln_to_itm_delta_mstr ([CUSTOMER] ,[MATERIAL],[Mixed Pallet Material],[Calendar Week],[Mixed Pallet Flag] ,CURRENCY, SALE_FLAG)

--PRINT N'03: #index created, start loaded gtw: ' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
--get all the forecasting values for future weeks from the TPM60 calculated table.  Use the current week variable.  This table will be applied to the final join
--conditions in the Fact table
IF OBJECT_ID ('tempDB..#zm_pln_to_itm_delta_gtwk') IS NOT NULL
begin
	DROP TABLE #zm_pln_to_itm_delta_gtwk;
end
SELECT DISTINCT [CUST] as [CUSTOMER] 
      ,[MATRL] as [MATERIAL] 
      ,[MIXD_PLT_MATRL] as [Mixed Pallet Material] 
      ,[CAL_WK] as [Calendar Week] 
      ,[MIXD_PLT_FLG] as [Mixed Pallet Flag] 
      ,[CURR] as[CURRENCY] 
      ,[PLN_SHIP_USD] as [Plan Ship $]
      ,[PLN_SHIP_LBS] as [Plan Ship LBS]
      ,[PLN_SHIP_EA] as [Plan Ship EA]
      ,[PLN_TOTL_OFF_INVC_USD] as [Plan Total Off Invoice Dollars]
      ,[TOTL_PLN_COST_OF_PROD_USD] as [Total Planned COP $]
      ,[TOTL_PLN_SHIPMNT_CS] as [Total Planned Shipment CS]
      ,[TOTL_PLN_SHIPMNT_KGS] as [Total Planned Shipment Kilos]
      ,[SALE_FLAG] = CASE
						WHEN [MIXD_PLT_FLG]  = 'N' THEN 'N'
						WHEN [MIXD_PLT_FLG]  = 'Z' THEN 'Z'
						ELSE 'D'
					  END
	  INTO #zm_pln_to_itm_delta_gtwk
	  FROM KNA_COMRCL.dbo.ZM_TPM60_CKF dbo
	  INNER JOIN #zm_pln_to_itm_delta_mstr mstr ON ([CUSTOMER] = [CUST] and [MATERIAL]= [MATRL] and [Mixed Pallet Material] = [MIXD_PLT_MATRL] and
		 [Calendar Week] = [CAL_WK] and [Mixed Pallet Flag] = [MIXD_PLT_FLG] and [CURR]= [CURRENCY])
	  WHERE @CLS_WK < [CAL_WK] -- CHANGED TO CLOSED PERIOD WEEK

--PRINT N'04: GTW loaded, create index' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
create clustered index ix_pln_to_itm_final on #zm_pln_to_itm_delta_gtwk ([CUSTOMER] ,[MATERIAL],[Mixed Pallet Material],[Calendar Week],[Mixed Pallet Flag] ,CURRENCY,[SALE_FLAG])

--PRINT N'05:Start loading prep1' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
--Use the multiprovider to create calculated fields that will be used in the final table.
--Use Plan To Item Actual to get all previous values as well as the table that was created previously
IF OBJECT_ID ('tempDB..#zm_pln_to_itm_delta_1') IS NOT NULL
begin
	DROP TABLE #zm_pln_to_itm_delta_1;
end
SELECT  mstr.[CUSTOMER]
      ,mstr.[MATERIAL]
      ,mstr.[Mixed Pallet Material]
      ,mstr.[Mixed Pallet Flag]
	  ,mstr.[Calendar Week]
      ,mstr.[CURRENCY]
      ,ISNULL([PLN_BASE_LBS],0) as [Plan Base LBS]
      ,ISNULL([PLN_INCR_LBS],0) as [Plan Incr LBS]
      ,ISNULL([PLN_BASE_UNITS],0) as [Plan Base Units]
      ,ISNULL([PLN_INCR_UNITS],0) as [Plan Incr Units]
      ,ISNULL([PLN_BASE_RTL_USD],0) as [Plan Base Ret $'s]
      ,ISNULL([PLN_INCR_RTL_USD] ,0) as [Plan Incr Ret $'s]
      ,ISNULL([PLN_BASE_USD] ,0) as [Plan Base $]
      ,ISNULL([PLN_INCR_SHIP_USD],0) as [Plan Incr Ship $]
      ,ISNULL(tpm.[PLN_SHIP_USD],0) as [Plan Ship $]
      ,ISNULL(tpm.[TOTL_PLN_SHIPMNT_CS],0) as [Plan Ship CS]
      ,ISNULL(tpm.[PLN_SHIP_LBS],0) as [Plan Ship LBS]
      ,ISNULL(tpm.[TOTL_PLN_SHIPMNT_KGS],0) as [Plan Ship KG]
      ,ISNULL(tpm.[PLN_SHIP_EA],0) as [Plan Ship EA]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_USD],0)  else 0 end as [Actual Ship $]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_CS],0)  else 0 end as [Actual Ship CS]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_LBS],0) else 0 end  as [Actual Ship LBS]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_EA],0)  else 0 end as [Actual Ship Units]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL([ACTL_KGS],0) else 0 end  as [Actual Ship KG]
	  ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[DM_ACTL_COST_OF_PROD_USD],0) else 0 end as[Actual COP $]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_USD],0) else 0 end as [< Curr Week: LE Ship $ - Actual Dollars ($)] 
      ,ISNULL(gtw.[Plan Ship $],0) as [>= Curr Week: LE Ship $ - Plan Ship $]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_LBS],0) else 0 end as [< Curr Week: LE Ship LBS - Actual Pounds (LB)]
      ,ISNULL(gtw.[Plan Ship LBS],0) as [>= Curr Week: LE Ship LBS - Plan Ship LBS]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_EA],0) else 0 end as [< Curr Week: LE Ship Units - Actual Eaches (EA)]
      ,ISNULL(gtw.[Plan Ship EA],0) as [>= Curr Week: LE Ship Units - Plan Ship EA]
      ,ISNULL(tpm.[TOTL_PLN_COST_OF_PROD_USD] ,0) as [Total Planned COP $]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[DM_ACTL_COST_OF_PROD_USD],0) else 0 end as  [< Curr Week: LE COP $ - Actual COP $]
      ,ISNULL(gtw.[Total Planned COP $],0) as [>= Curr Week: LE COP $ - Total Planned COP $]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_CS],0) else 0 end as [< Curr Week: LE Cases - Actual Cases (CS)]
      ,ISNULL(gtw.[Total Planned Shipment CS],0) as [>= Curr Week: LE Cases - Total Planned Shipment CS]
      ,case when pln.[CAL_WK] <= @CLS_WK then ISNULL(pln.[ACTL_KGS],0) else 0 end as [< Curr Week: LE Kilos - Actual Kilograms (KG)]
      ,ISNULL(gtw.[Total Planned Shipment Kilos],0) as [>= Curr Week: LE Kilos - Total Planned Shipment Kilos]
      ,ISNULL([PLN_BASE_CS],0) as [Plan Base Cases]
      ,ISNULL([PLN_INCR_CS],0) as [Plan Incr Cases]
      ,ISNULL([PLN_INCR_SHIP_CS],0) as [Plan Incr Ship Cases]
      ,ISNULL([PLN_INCR_SHIP_UNITS],0) as [Plan Incr Ship Units]
      ,ISNULL([PLN_INCR_SHIP_LBS],0) as [Plan Incr Ship LBS]
      ,ISNULL([PLN_INCR_SHIP_KG],0) as [Plan Incr Ship Kilos]
      ,ISNULL([SUGSTD_BASE_VOL_SAS],0) as [Suggested Base Volume (SAS)]
      ,ISNULL([SUGSTD_SHLF_PRC_SAS],0) as [Suggested Shelf Price (SAS)]
      ,ISNULL([LATST_ESTMT_MISS_OI],0) as [Lastest Estimate Missed OI]
      ,ISNULL([LATST_ESTMT_BILLBACK_USD],0) as [Latest Estimate Bill Back Dollars]
      ,ISNULL([LATST_ESTMT_EDLP_BILLBACK_USD],0) as [Latest Estimate EDLP Bill Back Dollars]
      ,ISNULL([LATST_ESTMT_SCANAPPS_BILLBACK_USD],0) as [Latest Estimate Scan Apps Bill Back Dollars]
      ,ISNULL([LATST_ESTMT_SCAN_USD],0) as [Latest Estimate Scan Dollars]
      ,ISNULL([LE_WW_USD],0) as [LE WW$]
      ,ISNULL([LATST_ESTMT_TOTL_FIX_KMF],0) as [Latest Estimate Total Fixed KMF]
      ,case when @curr_week <=tpm.[CAL_WK] then  ISNULL(gtw.[Plan Total Off Invoice Dollars],0) else 0 end as [Plan Total Off Invoice Dollars]
      ,ISNULL(pln.[SPCL_PROMTN_ALLWNC]*(-1),0) as [Actual OI Spend (Not restricted)]
      ,ISNULL([PLN_TOTL_FIX_KMF_SPND],0) as [Plan Total Fixed KMF Spend]
      ,ISNULL([PLN_VAR_KMF_SPND],0) as [Plan Variable KMF Spend]
	  ,ISNULL([SCAN_APPS_OL_RT_AMT],0) + ISNULL([OL_AMT],0) as [Overlay Amount]---TASK0564827 - ADD Scanner apps and overlay amount columns
	INTO #zm_pln_to_itm_delta_1
	FROM  #zm_pln_to_itm_delta_mstr mstr 
	LEFT OUTER JOIN [KNA_COMRCL].[dbo].[ZM_TPM60_CKF] tpm ON (tpm.[CUST]  = mstr.CUSTOMER and tpm.[MATRL] = mstr.MATERIAL and tpm.[MIXD_PLT_MATRL] = mstr.[Mixed Pallet Material] 
												and tpm.[CAL_WK]  = mstr.[Calendar Week] and tpm.[MIXD_PLT_FLG]  = mstr.[Mixed Pallet Flag] and  tpm.[CURR] = mstr.CURRENCY and 
												tpm.[SALE_FLG]  = mstr.SALE_FLAG )
	LEFT OUTER JOIN #zm_pln_to_itm_delta_gtwk gtw ON (gtw.CUSTOMER = mstr.CUSTOMER and gtw.MATERIAL = mstr.MATERIAL and gtw.[Mixed Pallet Material] = mstr.[Mixed Pallet Material] 
												and gtw.[Calendar Week] = mstr.[Calendar Week] and gtw.[Mixed Pallet Flag] = mstr.[Mixed Pallet Flag] and  gtw.CURRENCY = mstr.CURRENCY and 
												gtw.[SALE_FLAG]= mstr.SALE_FLAG )
	LEFT OUTER JOIN [KNA_COMRCL].[dbo].[PLN_TO_ITM_ACT] pln ON (mstr.CUSTOMER = pln.[CUST] and mstr.MATERIAL = pln.[MATRL] and mstr.[Mixed Pallet Material] = pln.[MIXD_PLT_MATRL] 
												and mstr.[Calendar Week] = pln.[CAL_WK] and mstr.[Mixed Pallet Flag] = pln.[MIXD_PLT_FLG] and  mstr.CURRENCY = pln.[CURR] and mstr.SALE_FLAG = pln.SALE_FLG
												and  pln.[CAL_WK] < @curr_week -- CHANGED TO CLOSED  PERIOD WEEK
												)
	

--PRINT N'09: begin final DELTA' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))*/
--aggregate some fields that will be used in the final table as well as move the final table into the correct format.  Also be sure to filter out any records
--That sum to 0.  
SELECT [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material]
      ,[Mixed Pallet Flag]
      ,[Calendar Week]
      ,[CURRENCY]
      ,sum([Plan Base LBS]) as [Plan Base LBS]
      ,sum([Plan Incr LBS]) as [Plan Incr LBS]
      ,sum([Plan Base Units]) as [Plan Base Units]
      ,sum([Plan Incr Units]) as [Plan Incr Units]
      ,sum([Plan Base Ret $'s]) as [Plan Base Ret $'s]
      ,sum([Plan Incr Ret $'s]) as [Plan Incr Ret $'s]
      ,sum([Plan Base $]) as [Plan Base $]
      ,sum([Plan Incr Ship $]) as [Plan Incr Ship $]
      ,sum([Plan Ship CS]) as [Plan Ship CS]
      ,sum([Plan Ship $]) as [Plan Ship $]
      ,sum([Plan Ship LBS]) as [Plan Ship LBS]
      ,sum([Plan Ship KG]) as [Plan Ship KG]
      ,sum([Plan Ship EA]) as [Plan Ship EA]
      ,sum([Actual Ship $]) as [Actual Ship $]
      ,sum([Actual Ship CS]) as [Actual Ship CS]
      ,sum([Actual Ship LBS]) as [Actual Ship LBS]
      ,sum([Actual Ship Units]) as [Actual Ship Units]
      ,sum([Actual Ship KG]) as [Actual Ship KG]
	  ,sum([LE Ship $]) as [LE Ship $]
	  ,sum([LE Ship LBS]) as [LE Ship LBS]
	  ,sum([LE Ship Units]) as [LE Ship Units]
	  ,sum([Total Planned KMF $]) as [Total Planned KMF $]
	  ,sum([LE KMF $]) as [LE KMF $]
	  ,sum([Total Planned COP $]) as [Total Planned COP $]
	  ,sum([Actual COP $]) as [Actual COP $]
	  ,sum([LE COP $]) as [LE COP $]
	  ,sum([LE Cases]) as [LE Cases]
	  ,sum([LE Kilos]) as [LE Kilos]
      ,sum([Plan Base Cases]) as [Plan Base Cases]
      ,sum([Plan Incr Cases]) as [Plan Incr Cases]
      ,sum([Plan Incr Ship Cases]) as [Plan Incr Ship Cases]
      ,sum([Plan Incr Ship Units]) as [Plan Incr Ship Units]
      ,sum([Plan Incr Ship LBS]) as [Plan Incr Ship LBS]
      ,sum([Plan Incr Ship Kilos]) as [Plan Incr Ship Kilos]
      ,sum([Suggested Base Volume (SAS)]) as [Suggested Base Volume (SAS)]
      ,sum([Suggested Shelf Price (SAS)]) as [Suggested Shelf Price (SAS)]
	  INTO #pln_to_itm_final_delta
	  FROM (SELECT [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material]
      ,[Mixed Pallet Flag]
      ,[Calendar Week]
      ,[CURRENCY]
      ,[Plan Base LBS]
      ,[Plan Incr LBS]
      ,[Plan Base Units]
      ,[Plan Incr Units]
      ,[Plan Base Ret $'s]
      ,[Plan Incr Ret $'s]
      ,[Plan Base $]
      ,[Plan Incr Ship $]
      ,[Plan Ship CS]
      ,[Plan Ship $]
      ,[Plan Ship LBS]
      ,[Plan Ship KG]
      ,[Plan Ship EA]
      ,[Actual Ship $]
      ,[Actual Ship CS]
      ,[Actual Ship LBS]
      ,[Actual Ship Units]
      ,[Actual Ship KG]
      ,[< Curr Week: LE Ship $ - Actual Dollars ($)]+[>= Curr Week: LE Ship $ - Plan Ship $] as [LE Ship $]
      ,[< Curr Week: LE Ship LBS - Actual Pounds (LB)]+[>= Curr Week: LE Ship LBS - Plan Ship LBS] as [LE Ship LBS]
      ,[< Curr Week: LE Ship Units - Actual Eaches (EA)]+[>= Curr Week: LE Ship Units - Plan Ship EA] as [LE Ship Units]
      ,[Plan Total Fixed KMF Spend]+[Plan Variable KMF Spend] as [Total Planned KMF $]
      ,[LE KMF $] = CASE
						WHEN @curr_week > [Calendar Week] and @curr_year = floor([Calendar Week]/100)
						THEN [Latest Estimate Total Fixed KMF] + [Actual OI Spend (Not restricted)] - [Plan Total Off Invoice Dollars] + [Lastest Estimate Missed OI] + 
															[Latest Estimate Bill Back Dollars] + [Latest Estimate EDLP Bill Back Dollars] + [Latest Estimate Scan Apps Bill Back Dollars] + [Latest Estimate Scan Dollars] + [LE WW$] + [Overlay Amount]
						ELSE [Latest Estimate Total Fixed KMF] + [Actual OI Spend (Not restricted)] + [Plan Total Off Invoice Dollars] + [Lastest Estimate Missed OI] + 
							[Latest Estimate Bill Back Dollars] + [Latest Estimate EDLP Bill Back Dollars] + [Latest Estimate Scan Apps Bill Back Dollars] + [Latest Estimate Scan Dollars] + [LE WW$] +[Overlay Amount]----TASK0564827 - ADD Scanner apps and overlay amount columns
					END
      ,[Total Planned COP $]
      ,[Actual COP $]
      ,[< Curr Week: LE COP $ - Actual COP $]+[>= Curr Week: LE COP $ - Total Planned COP $] as [LE COP $]
      ,[< Curr Week: LE Cases - Actual Cases (CS)]+[>= Curr Week: LE Cases - Total Planned Shipment CS] as [LE Cases]
      ,[< Curr Week: LE Kilos - Actual Kilograms (KG)]+[>= Curr Week: LE Kilos - Total Planned Shipment Kilos] as [LE Kilos]
      ,[Plan Base Cases]
      ,[Plan Incr Cases]
      ,[Plan Incr Ship Cases]
      ,[Plan Incr Ship Units]
      ,[Plan Incr Ship LBS]
      ,[Plan Incr Ship Kilos]
      ,[Suggested Base Volume (SAS)]
      ,[Suggested Shelf Price (SAS)]
	  FROM #zm_pln_to_itm_delta_1) tmp
	  WHERE tmp.[Plan Base LBS]<> 0.000 or tmp.[Plan Incr LBS]<> 0.000 or tmp.[Plan Base Units]<> 0.000 or tmp.[Plan Incr Units]<> 0.000 or tmp.[Plan Base Ret $'s]<> 0.000 or tmp.[Plan Incr Ret $'s]<> 0.000 or tmp.[Plan Base $]<> 0.000 or tmp.[Plan Incr Ship $] <> 0.000 or tmp.[Plan Ship CS] <> 0.000 or tmp.[Plan Ship $]<> 0.000 or tmp.[Plan Ship LBS]<> 0.000 or tmp.[Plan Ship KG]
      <> 0.000 or tmp.[Plan Ship EA]<> 0.000 or tmp.[Actual Ship $]<> 0.000 or tmp.[Actual Ship CS]<> 0.000 or tmp.[Actual Ship LBS]<> 0.000 or tmp.[Actual Ship Units]<> 0.000 or tmp.[Actual Ship KG]<> 0.000 or tmp.[LE Ship $]<> 0.000 or tmp.[LE Ship LBS]<> 0.000 or tmp.[LE Ship Units]<> 0.000 or (tmp.[Total Planned KMF $]
      + tmp.[LE KMF $])<> 0.000 or tmp.[Total Planned COP $]<> 0.000 or tmp.[Actual COP $]<> 0.000 or tmp.[LE COP $]<> 0.000 or tmp.[LE Cases]<> 0.000 or tmp.[LE Kilos]<> 0.000 or tmp.[Plan Base Cases]<> 0.000 or tmp.[Plan Incr Cases]<> 0.000 or tmp.[Plan Incr Ship Cases]<> 0.000 or tmp.[Plan Incr Ship Units]
      <> 0.000 or tmp.[Plan Incr Ship LBS]<> 0.000 or tmp.[Plan Incr Ship Kilos]<> 0.000 or tmp.[Suggested Base Volume (SAS)]<> 0.000 or tmp.[Suggested Shelf Price (SAS)] <> 0.000 
	  GROUP BY [CUSTOMER]
      ,[MATERIAL]
      ,[Mixed Pallet Material]
      ,[Mixed Pallet Flag]
      ,[Calendar Week]
      ,[CURRENCY]


	  BEGIN TRANSACTION;
	  SAVE TRANSACTION  start_tran;
--PRINT N'08: begin delete and loading of final table' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
--Delete old records
--delete using delta from tpm60 and data that has been updated
DELETE FROM [KNA_COMRCL].[dbo].[PLN_TO_ITM]
WHERE EXISTS ( SELECT [CUST] ,[MATRL],[MIXD_PLT_MATRL],[CAL_WK],[MIXD_PLT_FLG] ,CURR FROM [KNA_COMRCL].[STG].[ZM_TPM60] stg
				WHERE stg.[CUST] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].CUST and stg.[MATRL]=[KNA_COMRCL].[dbo].[PLN_TO_ITM].[MATRL] and stg.[MIXD_PLT_MATRL] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[MIXD_PLT_MATRL] 
				and stg.[CAL_WK] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[CAL_WK] and stg.[MIXD_PLT_FLG]=[KNA_COMRCL].[dbo].[PLN_TO_ITM].[MIXD_PLT_FLG]
				 and stg.CURR = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[CURR])


DELETE FROM [KNA_COMRCL].[dbo].[PLN_TO_ITM]
WHERE EXISTS ( SELECT [CUST] ,[MATRL],[MIXD_PLT_MATRL],[CAL_WK],[MIXD_PLT_FLG] ,CURR FROM [KNA_COMRCL].[STG].[PLN_TO_ITM_ACT] stg
				WHERE stg.[CUST] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].CUST and stg.[MATRL]=[KNA_COMRCL].[dbo].[PLN_TO_ITM].[MATRL] and stg.[MIXD_PLT_MATRL] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[MIXD_PLT_MATRL] 
				and stg.[CAL_WK] = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[CAL_WK] and stg.[MIXD_PLT_FLG]=[KNA_COMRCL].[dbo].[PLN_TO_ITM].[MIXD_PLT_FLG]
				 and stg.CURR = [KNA_COMRCL].[dbo].[PLN_TO_ITM].[CURR])
--insert all appropriate records into the final table
INSERT INTO KNA_COMRCL.dbo.PLN_TO_ITM
SELECT * 
FROM #pln_to_itm_final_delta

	IF (@@ERROR <> 0)
	begin
        ROLLBACK TRANSACTION start_tran;
		RETURN @@ERROR
	end
	COMMIT TRANSACTION;
	--PRINT N'06: DELTA' + CAST(CAST(GETDATE() as Datetime2 (3)) as Varchar(20))
	
	end

END
GO
